/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class App {

public App() {/* compiled code */}

    static ArrayList<Utilizator> utilizatori = new ArrayList<Utilizator>();
    static ArrayList<Postare> postari = new ArrayList<Postare>();
    static ArrayList<Integer> idPostari = new ArrayList<Integer>();
    static ArrayList<Comentariu> comentarii = new ArrayList<Comentariu>();
    static ArrayList<Integer> idComentarii = new ArrayList<Integer>();
    public String scoateInfoDinParametru(String parametru) {
        StringBuilder stringAuxiliar = new StringBuilder();
        for (int i = 0; i < parametru.length(); i++)
            if (parametru.charAt(i) == '\'') {
                i++;
                while (parametru.charAt(i) != '\'') {
                    stringAuxiliar.append(parametru.charAt(i));
                    i++;
                }
                break;
            }
        return stringAuxiliar.toString();
    }

    public static void main(java.lang.String[] strings) {
        if (strings == null) {
            System.out.print("Hello world!");
            return;
        }
        // CREARE UTILIZATOR
        if (strings[0].equals("-create-user")) {
            if ((strings.length - 1) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Please provide username'}");
                return;
            }
            if ((strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Please provide password'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator)) {
                    System.out.print("{ 'status' : 'error', 'message' : 'User already exists'}");
                    return;
                }
            }
            Utilizator utilizatorNou = new Utilizator();
            utilizatorNou.numeUtilizator = numeUtilizator;
            utilizatorNou.setParola(parolaUtilizator);
            utilizatori.add(utilizatorNou);
            System.out.print("{ 'status' : 'ok', 'message' : 'User created successfully'}");
            return;
        }
        // CREARE POSTARE
        if (strings[0].equals("-create-post")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No text provided'}");
                return;
            }
            String textPostare = new App().scoateInfoDinParametru(strings[3]);
            if (textPostare.length() > 300) {
                System.out.print("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");
                return;
            }
            Postare postareNoua = new Postare();
            postareNoua.continutPostare = textPostare;
            postareNoua.creatorPostare = numeUtilizator;
            DateFormat formatData = new SimpleDateFormat("dd-MM-yyyy");
            Date data = new Date();
            postareNoua.dataPostare = formatData.format(data);
            postari.add(postareNoua);
            idPostari.add(postareNoua.idPostare);
            utilizatorCurent.idPostariCreate[utilizatorCurent.numarPostariCreate] = postareNoua.idPostare;
            utilizatorCurent.numarPostariCreate++;
            System.out.print("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
            return;
        }
        // STERGERE POSTARE
        if (strings[0].equals("-delete-post-by-id")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                return;
            }
            String idPostare = new App().scoateInfoDinParametru(strings[3]);
            ok = 0;
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(idPostare) && p.creatorPostare.equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                return;
            }
            Postare postareCurenta = null;
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(idPostare)) {
                    postareCurenta = postari.get(i);
                    break;
                }
            }
            postari.remove(postareCurenta);
            idPostari.remove(Integer.parseInt(idPostare));
            for (int i = 0; i < utilizatorCurent.numarPostariCreate; i++)
                if (utilizatorCurent.idPostariCreate[i] == Integer.parseInt(idPostare)) {
                    for (int j = i; j < utilizatorCurent.numarPostariCreate - 1; j++)
                        utilizatorCurent.idPostariCreate[j] = utilizatorCurent.idPostariCreate[j + 1];
                    break;
                }
            utilizatorCurent.numarPostariCreate--;
            System.out.print("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}");
            return;
        }
        // FOLLLOW UTILIZATOR
        if (strings[0].equals("-follow-user-by-username")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                return;
            }
            String followNumeUtilizator = new App().scoateInfoDinParametru(strings[3]);
            Utilizator followUtilizator = null;
            ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(followNumeUtilizator)) {
                    followUtilizator = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < utilizatorCurent.numarUrmariti; i++) {
                if (utilizatorCurent.urmariti[i].equals(followNumeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 1) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                return;
            }
            utilizatorCurent.urmariti[utilizatorCurent.numarUrmariti] = followNumeUtilizator;
            utilizatorCurent.numarUrmariti++;
            followUtilizator.urmaritori[followUtilizator.numarUrmaritori] = numeUtilizator;
            followUtilizator.numarUrmaritori++;
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // UNFOLLOW UTILIZATOR
        if (strings[0].equals("-unfollow-user-by-username")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                return;
            }
            String unfollowNumeUtilizator = new App().scoateInfoDinParametru(strings[3]);
            Utilizator unfollowUtilizator = null;
            ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(unfollowNumeUtilizator)) {
                    unfollowUtilizator = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < utilizatorCurent.numarUrmariti; i++) {
                if (utilizatorCurent.urmariti[i].equals(unfollowNumeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                return;
            }
            for (int i = 0; i < utilizatorCurent.numarUrmariti; i++)
                if (utilizatorCurent.urmariti[i].equals(unfollowNumeUtilizator)) {
                    for (int j = i; j < utilizatorCurent.numarUrmariti - 1; j++)
                        utilizatorCurent.urmariti[j] = utilizatorCurent.urmariti[j + 1];
                    break;
                }
            utilizatorCurent.numarUrmariti--;
            for (int i = 0; i < unfollowUtilizator.numarUrmaritori; i++)
                if (unfollowUtilizator.urmaritori[i].equals(numeUtilizator)) {
                    for (int j = i; j < unfollowUtilizator.numarUrmaritori - 1; j++)
                        unfollowUtilizator.urmaritori[j] = unfollowUtilizator.urmaritori[j + 1];
                    break;
                }
            unfollowUtilizator.numarUrmaritori--;
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // LIKE POSTARE
        if (strings[0].equals("-like-post")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                return;
            }
            String likeIdPostare = new App().scoateInfoDinParametru(strings[3]);
            Postare likePostare = null;
            ok = 0;
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(likeIdPostare)) {
                    likePostare = p;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < likePostare.numarApreciatori; i++) {
                if (likePostare.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 1) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                return;
            }
            ok = 0;
            if (likePostare.creatorPostare.equals(numeUtilizator))
                ok = 1;
            if (ok == 1) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                return;
            }
            likePostare.utilizatorDaLike(utilizatorCurent, likePostare);
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // UNLIKE POSTARE
        if (strings[0].equals("-unlike-post")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                return;
            }
            String unlikeIdPostare = new App().scoateInfoDinParametru(strings[3]);
            Postare unlikePostare = null;
            ok = 0;
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(unlikeIdPostare)) {
                    unlikePostare = p;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < unlikePostare.numarApreciatori; i++)
                if (unlikePostare.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                return;
            }
            for (int i = 0; i < unlikePostare.numarApreciatori; i++)
                if (unlikePostare.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    for (int j = i; j < unlikePostare.numarApreciatori - 1; j++)
                        unlikePostare.utilizatoriApreciatori[j] = unlikePostare.utilizatoriApreciatori[j + 1];
                    break;
                }
            unlikePostare.numarApreciatori--;
            for (int i = 0; i < utilizatorCurent.numarMediaApreciat; i++)
                if (utilizatorCurent.idMediaApreciat[i] == Integer.parseInt(unlikeIdPostare)) {
                    for (int j = i; j < utilizatorCurent.numarMediaApreciat - 1; j++)
                        utilizatorCurent.idMediaApreciat[j] = utilizatorCurent.idMediaApreciat[j + 1];
                    break;
                }
            utilizatorCurent.numarMediaApreciat--;
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // LIKE COMENTARIU
        if (strings[0].equals("-like-comment")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                return;
            }
            String likeIdComentariu = new App().scoateInfoDinParametru(strings[3]);
            Comentariu likeComentariu = null;
            ok = 0;
            for (int i = 0; i < comentarii.size(); i++) {
                Comentariu c = comentarii.get(i);
                if (c.idComentariu == Integer.parseInt(likeIdComentariu)) {
                    likeComentariu = c;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < likeComentariu.numarApreciatori; i++) {
                if (likeComentariu.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 1) {
                System.out.print("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                return;
            }
            ok = 0;
            if (likeComentariu.autorComentariu.equals(numeUtilizator))
                ok = 1;
            if (ok == 1) {
                System.out.print("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                return;
            }
            likeComentariu.utilizatorDaLike(utilizatorCurent, likeComentariu);
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // UNLIKE COMENTARIU
        if (strings[0].equals("-unlike-comment")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                return;
            }
            String unlikeIdComentariu = new App().scoateInfoDinParametru(strings[3]);
            Comentariu unlikeComentariu = null;
            ok = 0;
            for (int i = 0; i < comentarii.size(); i++) {
                Comentariu c = comentarii.get(i);
                if (c.idComentariu == Integer.parseInt(unlikeIdComentariu)) {
                    unlikeComentariu = c;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < unlikeComentariu.numarApreciatori; i++)
                if (unlikeComentariu.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                return;
            }
            for (int i = 0; i < unlikeComentariu.numarApreciatori; i++)
                if (unlikeComentariu.utilizatoriApreciatori[i].equals(numeUtilizator)) {
                    for (int j = i; j < unlikeComentariu.numarApreciatori - 1; j++)
                        unlikeComentariu.utilizatoriApreciatori[j] = unlikeComentariu.utilizatoriApreciatori[j + 1];
                    break;
                }
            unlikeComentariu.numarApreciatori--;
            for (int i = 0; i < utilizatorCurent.numarMediaApreciat; i++)
                if (utilizatorCurent.idMediaApreciat[i] == -Integer.parseInt(unlikeIdComentariu)) {
                    for (int j = i; j < utilizatorCurent.numarMediaApreciat - 1; j++)
                        utilizatorCurent.idMediaApreciat[j] = utilizatorCurent.idMediaApreciat[j + 1];
                    break;
                }
            utilizatorCurent.numarMediaApreciat--;
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // POSTARI UTILIZATORII URMARITI
        if (strings[0].equals("-get-followings-posts")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            Collections.sort(idPostari, Collections.reverseOrder());
            Collections.sort(postari, new Comparator<Postare>() {
                public int compare(Postare postare1, Postare postare2) {
                    int index1 = 0;
                    while (index1 < idPostari.size() && idPostari.get(index1) != postare1.idPostare) {
                        index1++;
                    }
                    int index2 = 0;
                    while (index2 < idPostari.size() && idPostari.get(index2) != postare2.idPostare) {
                        index2++;
                    }
                    return Integer.compare(index1, index2);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                for (int j = 0; j < utilizatorCurent.numarUrmariti; j++) {
                    if (utilizatorCurent.urmariti[j].equals(p.creatorPostare)) {
                        int altaPostareGasita = 0;
                        for (int k = i + 1; k < postari.size(); k++) {
                            Postare pAux = postari.get(k);
                            for (int l = 0; l < utilizatorCurent.numarUrmariti; l++) {
                                if (utilizatorCurent.urmariti[l].equals(pAux.creatorPostare)) {
                                    altaPostareGasita = 1;
                                    break;
                                }
                            }
                            if (altaPostareGasita == 1)
                                break;
                        }
                        if (altaPostareGasita == 1) {
                            System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "'},");
                        } else {
                            System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "'}]}");
                            return;
                        }
                    }
                }
            }
        }
        // POSTARI ALE UNUI UTILIZATOR
        if (strings[0].equals("-get-user-posts")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                return;
            }
            String afisareNumeUtilizator = new App().scoateInfoDinParametru(strings[3]);
            Utilizator afisareUtilizator = null;
            ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(afisareNumeUtilizator)) {
                    afisareUtilizator = u;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                return;
            }
            ok = 0;
            for (int i = 0; i < afisareUtilizator.numarUrmaritori; i++) {
                if (afisareUtilizator.urmaritori[i].equals(numeUtilizator))
                    ok = 1;
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                return;
            }
            Collections.sort(idPostari, Collections.reverseOrder());
            Collections.sort(postari, new Comparator<Postare>() {
                public int compare(Postare postare1, Postare postare2) {
                    int index1 = 0;
                    while (index1 < idPostari.size() && idPostari.get(index1) != postare1.idPostare) {
                        index1++;
                    }
                    int index2 = 0;
                    while (index2 < idPostari.size() && idPostari.get(index2) != postare2.idPostare) {
                        index2++;
                    }
                    return Integer.compare(index1, index2);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.creatorPostare.equals(afisareNumeUtilizator)) {
                    int altaPostareGasita = 0;
                    for (int j = i + 1; j < postari.size(); j++) {
                        Postare pAux = postari.get(j);
                        if (pAux.creatorPostare.equals(afisareNumeUtilizator)) {
                            altaPostareGasita = 1;
                            break;
                        }
                    }
                    if (altaPostareGasita == 1) {
                        System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "'},");
                    } else {
                        System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "'}]}");
                        return;
                    }
                }
            }
        }
        // DETALII POSTARE
        if (strings[0].equals("-get-post-details")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                return;
            }
            String idPostare = new App().scoateInfoDinParametru(strings[3]);
            Postare postare = null;
            ok = 0;
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(idPostare)) {
                    postare = p;
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}");
                return;
            }
            String numeUtilizatorAutor = null;
            for (int i = 0; i < postari.size(); i++) {
                if (postari.get(i).idPostare == Integer.parseInt(idPostare)) {
                    numeUtilizatorAutor = postari.get(i).creatorPostare;
                    break;
                }
            }
            ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).numeUtilizator.equals(numeUtilizatorAutor)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                return;
            }
            Collections.sort(idComentarii, Collections.reverseOrder());
            Collections.sort(comentarii, new Comparator<Comentariu>() {
                public int compare(Comentariu comentariu1, Comentariu comentariu2) {
                    int index1 = 0;
                    while (index1 < idComentarii.size() && idComentarii.get(index1) != comentariu1.idComentariu) {
                        index1++;
                    }
                    int index2 = 0;
                    while (index2 < idComentarii.size() && idComentarii.get(index2) != comentariu2.idComentariu) {
                        index2++;
                    }
                    return Integer.compare(index1, index2);
                }
            });
            System.out.print("{'status' : 'ok', 'message' : [{'post_text' : '" + postare.continutPostare);
            System.out.print("', 'post_date' :'" + postare.dataPostare);
            System.out.print("', 'username' : '" + postare.creatorPostare);
            System.out.print("', 'number_of_likes' :'" + postare.numarApreciatori);
            System.out.print("', 'comments' : [{'comment_id' : '");
            for (int i = 0; i < comentarii.size(); i++) {
                Comentariu c = comentarii.get(i);
                if (c.idPostare == Integer.parseInt(idPostare)) {
                    int altComentariuGasit = 0;
                    for (int j = i + 1; j < comentarii.size(); j++) {
                        Comentariu cAux = comentarii.get(j);
                        if (cAux.idPostare == Integer.parseInt(idPostare)) {
                            altComentariuGasit = 1;
                            break;
                        }
                    }
                    if (altComentariuGasit == 1) {
                        System.out.print(c.idComentariu + "' , 'comment_text' : '" + c.continutComentariu + "', 'comment_date' : '" + c.dataComentariu + "', 'username' : '" + c.autorComentariu + "', 'number_of_likes' : '" + c.numarApreciatori + "'}, ");
                    } else {
                        System.out.print(c.idComentariu + "' , 'comment_text' : '" + c.continutComentariu + "', 'comment_date' : '" + c.dataComentariu + "', 'username' : '" + c.autorComentariu + "', 'number_of_likes' : '" + c.numarApreciatori + "'}] }] }");
                        return;
                    }
                }
            }
        }
        // CREEAZA COMENTARIU
        if (strings[0].equals("-comment-post")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0 || (strings.length - 4) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No text provided'}");
                return;
            }
            String idPostare = new App().scoateInfoDinParametru(strings[3]);
            String textComentariu = new App().scoateInfoDinParametru(strings[4]);
            if (textComentariu.length() > 300) {
                System.out.print("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");
                return;
            }
            Comentariu comentariuNou = new Comentariu();
            comentariuNou.idPostare = Integer.parseInt(idPostare);
            for (int i = 0; i < postari.size(); i++) {
                Postare p = postari.get(i);
                if (p.idPostare == Integer.parseInt(idPostare)) {
                    p.idComentariiAdaugate[p.numarComentariiAdaugate] = comentariuNou.idComentariu;
                    p.numarComentariiAdaugate++;
                    break;
                }
            }
            comentariuNou.continutComentariu = textComentariu;
            comentariuNou.autorComentariu = numeUtilizator;
            utilizatorCurent.idComentariiCreate[utilizatorCurent.numarComentariiCreate] = comentariuNou.idComentariu;
            utilizatorCurent.numarComentariiCreate++;
            DateFormat formatData = new SimpleDateFormat("dd-MM-yyyy");
            Date data = new Date();
            comentariuNou.dataComentariu = formatData.format(data);
            comentarii.add(comentariuNou);
            idComentarii.add(comentariuNou.idComentariu);
            System.out.print("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
            return;
        }
        // STERGE COMENTARIU
        if (strings[0].equals("-delete-comment-by-id")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                return;
            }
            String idComentariu = new App().scoateInfoDinParametru(strings[3]);
            ok = 0;
            for (int i = 0; i < comentarii.size(); i++) {
                Comentariu c = comentarii.get(i);
                if (c.idComentariu == Integer.parseInt(idComentariu) && c.autorComentariu.equals(numeUtilizator)) {
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                return;
            }
            Comentariu comentariuCurent = null;
            for (int i = 0; i < comentarii.size(); i++) {
                Comentariu c = comentarii.get(i);
                if (c.idComentariu == Integer.parseInt(idComentariu)) {
                    comentariuCurent = comentarii.get(i);
                    break;
                }
            }
            comentarii.remove(comentariuCurent);
            idComentarii.remove(Integer.parseInt(idComentariu));
            for (int i = 0; i < utilizatorCurent.numarComentariiCreate; i++)
                if (utilizatorCurent.idComentariiCreate[i] == Integer.parseInt(idComentariu)) {
                    for (int j = i; j < utilizatorCurent.numarComentariiCreate - 1; j++)
                        utilizatorCurent.idComentariiCreate[j] = utilizatorCurent.idComentariiCreate[j + 1];
                    break;
                }
            utilizatorCurent.numarComentariiCreate--;
            System.out.print("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            return;
        }
        // URMARITII UTILIZATORULUI CURENT
        if (strings[0].equals("-get-following")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            System.out.print("{ 'status' : 'ok', 'message' : [ ");
            for (int i = 0; i < utilizatorCurent.numarUrmariti; i++) {
                if (i == (utilizatorCurent.numarUrmariti - 1)) {
                    System.out.print("'" + utilizatorCurent.urmariti[i] + "' ]}");
                    return;
                }
                System.out.print("'" + utilizatorCurent.urmariti[i] +"', ");
            }
        }
        // URMARITORII UNUI UTILIZATOR
        if (strings[0].equals("-get-followers")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            if ((strings.length - 3) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                return;
            }
            String afiseazaNumeUtilizator = new App().scoateInfoDinParametru(strings[3]);
            Utilizator afiseazaUtilizator = null;
            ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(afiseazaNumeUtilizator)) {
                    afiseazaUtilizator = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
                return;
            }
            System.out.print("{ 'status' : 'ok', 'message' : [ ");
            for (int i = 0; i < afiseazaUtilizator.numarUrmaritori; i++) {
                if (i == (afiseazaUtilizator.numarUrmaritori - 1)) {
                    System.out.print("'" + afiseazaUtilizator.urmaritori[i] + "']}");
                    return;
                }
                System.out.print("'" + afiseazaUtilizator.urmaritori[i] + "', ");
            }
        }
        // TOP 5 POSTARI APRECIATE
        if (strings[0].equals("-get-most-liked-posts")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            Collections.sort(postari, new Comparator<Postare>() {
                public int compare(Postare postare1, Postare postare2) {
                    return Integer.compare(postare2.numarApreciatori, postare1.numarApreciatori);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < 5; i++) {
                Postare p = postari.get(i);
                if (i == 4 || i == (postari.size() - 1)) {
                    System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "', 'number_of_likes' : '" + p.numarApreciatori + "' } ]}");
                    return;
                } else {
                    System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "', 'number_of_likes' : '" + p.numarApreciatori + "' },");
                }
            }
        }
        // TOP 5 POSTARI COMENTATE
        if (strings[0].equals("-get-most-commented-posts")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            Collections.sort(postari, new Comparator<Postare>() {
                public int compare(Postare postare1, Postare postare2) {
                    return Integer.compare(postare2.numarComentariiAdaugate, postare1.numarComentariiAdaugate);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < 5; i++) {
                Postare p = postari.get(i);
                if (i == 4 || i == (postari.size() - 1)) {
                    System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "', 'number_of_comments' : '" + p.numarComentariiAdaugate + "' }]}");
                    return;
                } else {
                    System.out.print("{'post_id' : '" + p.idPostare + "', 'post_text' : '" + p.continutPostare + "', 'post_date' : '" + p.dataPostare + "', 'username' : '" + p.creatorPostare + "', 'number_of_comments' : '" + p.numarComentariiAdaugate + "' },");
                }
            }
        }
        // TOP 5 UTILIZATORI URMARITI
        if (strings[0].equals("-get-most-followed-users")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            Collections.sort(utilizatori, new Comparator<Utilizator>() {
                public int compare(Utilizator utilizator1, Utilizator utilizator2) {
                    return Integer.compare(utilizator2.numarUrmaritori, utilizator1.numarUrmaritori);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < 5; i++) {
                Utilizator u = utilizatori.get(i);
                if (i == 4 || i == (utilizatori.size() - 1)) {
                    System.out.print("{'username' : '" + u.numeUtilizator + "','number_of_followers' : '" + u.numarUrmaritori + "' } ]}");
                    return;
                } else {
                    System.out.print("{'username' : '" + u.numeUtilizator + "','number_of_followers' : '" + u.numarUrmaritori + "' },");
                }
            }
        }
        // TOP 5 UTILIZATORI APRECIATI
        if (strings[0].equals("-get-most-liked-users")) {
            if ((strings.length - 1) == 0 || (strings.length - 2) == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            String numeUtilizator = new App().scoateInfoDinParametru(strings[1]);
            String parolaUtilizator = new App().scoateInfoDinParametru(strings[2]);
            Utilizator utilizatorCurent = null;
            int ok = 0;
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                if (u.numeUtilizator.equals(numeUtilizator) && u.getParola().equals(parolaUtilizator)) {
                    utilizatorCurent = utilizatori.get(i);
                    ok = 1;
                    break;
                }
            }
            if (ok == 0) {
                System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            for (int i = 0; i < utilizatori.size(); i++) {
                Utilizator u = utilizatori.get(i);
                for (int j = 0; j < u.numarPostariCreate; j++) {
                    int idPostare = u.idPostariCreate[j];
                    Postare p = null;
                    for (int k = 0; k < postari.size(); k++) {
                        if (idPostare == postari.get(k).idPostare) {
                            p = postari.get(k);
                            break;
                        }
                    }
                    u.cuanteDeAprecieri = u.cuanteDeAprecieri + p.numarApreciatori;
                }
                for (int j = 0; j < u.numarComentariiCreate; j++) {
                    int idComentariu = u.idComentariiCreate[j];
                    Comentariu c = null;
                    for (int k = 0; k < comentarii.size(); k++) {
                        if (idComentariu == comentarii.get(k).idComentariu) {
                            c = comentarii.get(k);
                            break;
                        }
                    }
                    u.cuanteDeAprecieri = u.cuanteDeAprecieri + c.numarApreciatori;
                }
            }
            Collections.sort(utilizatori, new Comparator<Utilizator>() {
                public int compare(Utilizator utilizator1, Utilizator utilizator2) {
                    return Integer.compare(utilizator2.cuanteDeAprecieri, utilizator1.cuanteDeAprecieri);
                }
            });
            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (int i = 0; i < 5; i++) {
                Utilizator u = utilizatori.get(i);
                if (i == 4 || i == (utilizatori.size() - 1)) {
                    System.out.print("{'username' : '" + u.numeUtilizator + "','number_of_likes' : '" + u.cuanteDeAprecieri + "'}]}");
                    return;
                } else {
                    System.out.print("{'username' : '" + u.numeUtilizator + "','number_of_likes' : '" + u.cuanteDeAprecieri + "'},");
                }
            }
        }
        // CURATA TOT
        if (strings[0].equals("-cleanup-all")) {
            comentarii.clear();
            new Comentariu().resetGenerareId();
            postari.clear();
            new Postare().resetGenerareId();
            utilizatori.clear();
            System.out.print("{ 'status' : 'ok', 'message' : 'Cleanup finished successfully'}");
            return;
        }
    }
}